services:
  eureka-naming-server:
    build: eureka-naming-server
    ports:
      - 8761:8761
    networks:
      - spring-postgres
    links:
      - spring-clound-config-server
#  service-gateway-api:
#    build: service-gateway-API
#    ports:
#      - 8080:8080
#    networks:
#      - spring-postgres
#    links:
#      - spring-clound-config-server
#      - eureka-naming-server
  spring-clound-config-server:
    build: spring-clound-config-server
    ports:
      - 8888:8888
    networks:
      - spring-postgres
  alfa:
    build: services/alfa
    ports:
      - 8002:8002
    networks:
      - spring-postgres
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://localhost:8761/eureka
#  beta:
#    build: services/beta
#    ports:
#      - 8001:8001
#    networks:
#      - spring-postgres
#    depends_on:
#      - spring-clound-config-server
#      - eureka-naming-server
#  limits-service:
#    build: services/limits-service
#    ports:
#      - 8887:8887
#    networks:
#      - spring-postgres
#    depends_on:
#      - spring-clound-config-server
#      - eureka-naming-server

#  db:
#    image: postgres
#    restart: always
#    secrets:
#      - db-password
#    volumes:
#      - db-data:/var/lib/postgresql/data
#    networks:
#      - spring-postgres
#    environment:
#      - POSTGRES_DB=example
#      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#    expose:
#      - 5432

#  storage:
#    image: openzipkin/zipkin-mysql
#    container_name: mysql
#    # Uncomment to expose the storage port for testing
#    # ports:
#    #   - 3306:3306
#
#    # The zipkin process services the UI, and also exposes a POST endpoint that
#    # instrumentation can send trace data to. Scribe is disabled by default.
#  zipkin:
#    image: openzipkin/zipkin
#    container_name: zipkin
#    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
#    environment:
#      - STORAGE_TYPE=mysql
#      # Point the zipkin at the storage backend
#      - MYSQL_HOST=mysql
#      # Uncomment to enable scribe
#      # - SCRIBE_ENABLED=true
#      # Uncomment to enable self-tracing
#      # - SELF_TRACING_ENABLED=true
#      # Uncomment to enable debug logging
#      # - JAVA_OPTS=-Dlogging.level.zipkin2=DEBUG
#    ports:
#      # Port used for the Zipkin UI and HTTP Api
#      - 9411:9411
#      # Uncomment if you set SCRIBE_ENABLED=true
#      # - 9410:9410
#    depends_on:
#      - storage
#
#  # Adds a cron to process spans since midnight every hour, and all spans each day
#  # This data is served by http://192.168.99.100:8080/dependency
#  #
#  # For more details, see https://github.com/openzipkin/docker-zipkin-dependencies
#  dependencies:
#    image: openzipkin/zipkin-dependencies
#    container_name: dependencies
#    entrypoint: crond -f
#    environment:
#      - STORAGE_TYPE=mysql
#      - MYSQL_HOST=mysql
#      # Add the baked-in username and password for the zipkin-mysql image
#      - MYSQL_USER=zipkin
#      - MYSQL_PASS=zipkin
#      # Uncomment to see dependency processing logs
#      # - ZIPKIN_LOG_LEVEL=DEBUG
#      # Uncomment to adjust memory used by the dependencies job
#      # - JAVA_OPTS=-verbose:gc -Xms1G -Xmx1G
#    depends_on:
#      - storage
#
#  prometheus:
#    image: prom/prometheus
#    container_name: prometheus
#    ports:
#      - 9090:9090
#    depends_on:
#      - storage
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#
#  grafana:
#    image: grafana/grafana
#    container_name: grafana
#    ports:
#      - 3000:3000
#    depends_on:
#      - prometheus
#    environment:
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#
#  setup_grafana_datasource:
#    image: appropriate/curl
#    container_name: setup_grafana_datasource
#    depends_on:
#      - grafana
#    volumes:
#      - ./prometheus/create-datasource-and-dashboard.sh:/create.sh:ro
#    command: /create.sh


volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt
networks:
  spring-postgres: